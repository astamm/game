// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// GetMixtureDensity
Rcpp::NumericVector GetMixtureDensity(const Rcpp::NumericVector& inputValues, const Rcpp::DataFrame& inputModel, const bool logScale);
RcppExport SEXP _game_GetMixtureDensity(SEXP inputValuesSEXP, SEXP inputModelSEXP, SEXP logScaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type inputValues(inputValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame& >::type inputModel(inputModelSEXP);
    Rcpp::traits::input_parameter< const bool >::type logScale(logScaleSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMixtureDensity(inputValues, inputModel, logScale));
    return rcpp_result_gen;
END_RCPP
}
// GetMean
Rcpp::NumericVector GetMean(const Rcpp::NumericVector& inputValues, const Rcpp::List& mixtureModels, const double alpha);
RcppExport SEXP _game_GetMean(SEXP inputValuesSEXP, SEXP mixtureModelsSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type inputValues(inputValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type mixtureModels(mixtureModelsSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMean(inputValues, mixtureModels, alpha));
    return rcpp_result_gen;
END_RCPP
}
// GetSquaredDistancesToMean
Rcpp::NumericVector GetSquaredDistancesToMean(const Rcpp::List& inputData, const Rcpp::LogicalVector& subsetValues, const Rcpp::NumericVector& nodeValues, const Rcpp::NumericVector& weightValues);
RcppExport SEXP _game_GetSquaredDistancesToMean(SEXP inputDataSEXP, SEXP subsetValuesSEXP, SEXP nodeValuesSEXP, SEXP weightValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inputData(inputDataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector& >::type subsetValues(subsetValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nodeValues(nodeValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weightValues(weightValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSquaredDistancesToMean(inputData, subsetValues, nodeValues, weightValues));
    return rcpp_result_gen;
END_RCPP
}
// GetSquaredDistanceMatrix
Rcpp::NumericVector GetSquaredDistanceMatrix(const Rcpp::List& inputData, const Rcpp::NumericVector& nodeValues, const Rcpp::NumericVector& weightValues);
RcppExport SEXP _game_GetSquaredDistanceMatrix(SEXP inputDataSEXP, SEXP nodeValuesSEXP, SEXP weightValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inputData(inputDataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nodeValues(nodeValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weightValues(weightValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSquaredDistanceMatrix(inputData, nodeValues, weightValues));
    return rcpp_result_gen;
END_RCPP
}
// GetMeanRawMoment
double GetMeanRawMoment(const Rcpp::List& inputData, const unsigned int order, const Rcpp::NumericVector& nodeValues, const Rcpp::NumericVector& weightValues);
RcppExport SEXP _game_GetMeanRawMoment(SEXP inputDataSEXP, SEXP orderSEXP, SEXP nodeValuesSEXP, SEXP weightValuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type inputData(inputDataSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type nodeValues(nodeValuesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type weightValues(weightValuesSEXP);
    rcpp_result_gen = Rcpp::wrap(GetMeanRawMoment(inputData, order, nodeValues, weightValues));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_game_GetMixtureDensity", (DL_FUNC) &_game_GetMixtureDensity, 3},
    {"_game_GetMean", (DL_FUNC) &_game_GetMean, 3},
    {"_game_GetSquaredDistancesToMean", (DL_FUNC) &_game_GetSquaredDistancesToMean, 4},
    {"_game_GetSquaredDistanceMatrix", (DL_FUNC) &_game_GetSquaredDistanceMatrix, 3},
    {"_game_GetMeanRawMoment", (DL_FUNC) &_game_GetMeanRawMoment, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_game(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
